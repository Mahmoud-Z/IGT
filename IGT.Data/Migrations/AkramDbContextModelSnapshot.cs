// <auto-generated />
using System;
using IGT.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IGT.Data.Migrations
{
    [DbContext(typeof(AkramDbContext))]
    partial class AkramDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IGT.Data.Models.OTP", b =>
                {
                    b.Property<int>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OTPId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OTPId")
                        .HasName("PK__OTP__B3E77E5CCF515C05");

                    b.HasIndex("UserId");

                    b.ToTable("OTP");
                });

            modelBuilder.Entity("IGT.Data.Models.Privilege", b =>
                {
                    b.Property<long>("PrivilegeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BackendURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PrivilegeId")
                        .HasName("PK__Privileg__B3E77E5CCF515C05");

                    b.ToTable("Privilege", (string)null);

                    b.HasData(
                        new
                        {
                            PrivilegeId = 1L,
                            BackendURL = "AuthenticationController/forgetPassword",
                            Code = "forgetPassword",
                            IsGeneral = true,
                            IsSuperAdmin = false,
                            Name = "forget password"
                        },
                        new
                        {
                            PrivilegeId = 2L,
                            BackendURL = "AuthenticationController/resetPassword",
                            Code = "resetPassword",
                            IsGeneral = true,
                            IsSuperAdmin = false,
                            Name = "reset password"
                        },
                        new
                        {
                            PrivilegeId = 3L,
                            BackendURL = "UserManagment/addUser",
                            Code = "addUser",
                            IsGeneral = false,
                            IsSuperAdmin = false,
                            Name = "Add user"
                        },
                        new
                        {
                            PrivilegeId = 4L,
                            BackendURL = "UserManagment/getAllUsers",
                            Code = "getAllUsers",
                            IsGeneral = false,
                            IsSuperAdmin = true,
                            Name = "Get all users"
                        },
                        new
                        {
                            PrivilegeId = 5L,
                            BackendURL = "RoleManagment/addRole",
                            Code = "addRole",
                            IsGeneral = false,
                            IsSuperAdmin = false,
                            Name = "Add role"
                        },
                        new
                        {
                            PrivilegeId = 6L,
                            BackendURL = "RoleManagment/updateRole",
                            Code = "updateRole",
                            IsGeneral = false,
                            IsSuperAdmin = false,
                            Name = "Update role"
                        },
                        new
                        {
                            PrivilegeId = 7L,
                            BackendURL = "RoleManagment/deleteRole",
                            Code = "deleteRole",
                            IsGeneral = false,
                            IsSuperAdmin = false,
                            Name = "Delete role"
                        },
                        new
                        {
                            PrivilegeId = 8L,
                            BackendURL = "RoleManagment/getRoles",
                            Code = "getRoles",
                            IsGeneral = false,
                            IsSuperAdmin = false,
                            Name = "Get role"
                        });
                });

            modelBuilder.Entity("IGT.Data.Models.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<long?>("SystemStatusCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionId")
                        .HasName("PK__Session__B3E77E5CCF515C05");

                    b.HasIndex(new[] { "SystemStatusCodeId" }, "IndexSessionSystemStatusCodeId");

                    b.HasIndex(new[] { "UserId" }, "IndexSessionUserId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("IGT.Data.Models.SystemStatusCode", b =>
                {
                    b.Property<long>("SystemStatusCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SystemStatusCodeId")
                        .HasName("PK__SystemStatusCode__B3E77E5CCF515C05");

                    b.ToTable("SystemStatusCode", (string)null);

                    b.HasData(
                        new
                        {
                            SystemStatusCodeId = 1L,
                            Model = "GENERAL",
                            Name = "DELETED",
                            Status = "DELETED"
                        },
                        new
                        {
                            SystemStatusCodeId = 2L,
                            Model = "GENERAL",
                            Name = "EXPIRED",
                            Status = "EXPIRED"
                        },
                        new
                        {
                            SystemStatusCodeId = 3L,
                            Model = "GENERAL",
                            Name = "ACTIVE",
                            Status = "ACTIVE"
                        });
                });

            modelBuilder.Entity("IGT.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("expiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isTempUser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RolePrivilege", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("RolePrivilege", (string)null);
                });

            modelBuilder.Entity("IGT.Data.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("SystemStatusCodeId")
                        .HasColumnType("bigint");

                    b.HasIndex(new[] { "SystemStatusCodeId" }, "IndexRoleSystemStatusCodeId");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "a25bb9b1-da7c-4097-9662-2aa8ccee45d1",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin",
                            CreatedUserId = "-99"
                        },
                        new
                        {
                            Id = "9862d943-93cd-432c-b347-ccb20d76619a",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User",
                            CreatedUserId = "-99"
                        });
                });

            modelBuilder.Entity("IGT.Data.Models.OTP", b =>
                {
                    b.HasOne("IGT.Data.Models.User", "User")
                        .WithMany("OTPs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OTP_REFERENCE_USER");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IGT.Data.Models.Session", b =>
                {
                    b.HasOne("IGT.Data.Models.SystemStatusCode", "SystemStatusCode")
                        .WithMany("Sessions")
                        .HasForeignKey("SystemStatusCodeId")
                        .HasConstraintName("FK_SESSION_REFERENCE_SYSTEM_STATUS_CODE");

                    b.HasOne("IGT.Data.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SESSION_REFERENCE_USER");

                    b.Navigation("SystemStatusCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IGT.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IGT.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IGT.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IGT.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePrivilege", b =>
                {
                    b.HasOne("IGT.Data.Models.Privilege", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_RolePrivilege_Privilege");

                    b.HasOne("IGT.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePrivilege_Role");
                });

            modelBuilder.Entity("IGT.Data.Models.Role", b =>
                {
                    b.HasOne("IGT.Data.Models.SystemStatusCode", "SystemStatusCode")
                        .WithMany("Roles")
                        .HasForeignKey("SystemStatusCodeId")
                        .HasConstraintName("FK_ROLE_REFERENCE_SYSTEM_STATUS_CODE");

                    b.Navigation("SystemStatusCode");
                });

            modelBuilder.Entity("IGT.Data.Models.SystemStatusCode", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("IGT.Data.Models.User", b =>
                {
                    b.Navigation("OTPs");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
